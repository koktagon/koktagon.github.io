/*

    EndPwn3 System
    
    Copyright 2018 EndPwn Project
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    DO NOT EDIT THIS FILE! Your bootstrap may overwrite changes to it, and you will lose your work!
    EndPwn3 users: You can prevent this by creating a file in the same directory named DONTUPDATE
    
    https://github.com/endpwn/

*/

const util = mrequire('xyz.dr1ft.epapi.core');
const events = mrequire('xyz.dr1ft.epapi.events');
const ui = mrequire('xyz.dr1ft.epapi.ui');

function print(str) {
    console.log(`%c[EndPwn3]%c ` + str, 'font-weight:bold;color:#0cc', '');
}

function setwordmark(html) {
    try {
        return document.querySelector('[class*="wordmark"]').innerHTML = html;
    }
    catch (e) { }
}

function setSigmaColor(color) {
    setTimeout(() => setwordmark(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="${color}" d="M0,0L13,0L13,2L3,2L8,7.5L3,13L13,13L13,15L0,15L0,13L5,7.5L0,2L0,0Z"/></svg>`), 2000);
}

module.exports = function () {

    setSigmaColor('#0ff');

    Object.assign(window.endpwn, {

        // safemode
        /*safemode: function () {
            $api.ui.showDialog({
                title: 'EndPwn: safe mode',
                body: 'This will restart your client in a state without plugin support.',
                confirmText: 'Yes', cancelText: 'No',

                onConfirm: () => {

                    $api.localStorage.set('safemode', 1);
                    window.electron.getCurrentWindow().reload();

                }
            });
        },*/

        // uninstaller
        uninstall: function () {
            ui.showDialog({
                title: 'EndPwn: confirm uninstallation',
                body: 'Are you sure you want to remove EndPwn from your client? You can reinstall it at any time.',
                confirmText: 'Yes', cancelText: 'No',

                onConfirm: () => {

                    DiscordNative.globals.appSettings.set('WEBAPP_ENDPOINT');
                    DiscordNative.globals.appSettings.set('WEBAPP_PATH');
                    DiscordNative.globals.appSettings.set('UPDATE_ENDPOINT');
                    DiscordNative.globals.appSettings.save();

                    reloadElectronApp();

                }
            });
        },

        // endpwn customizer
        //customizer: krequire('customizer'),

        // settings page stuff
        //settings: krequire('settings'),

        // wrapper function for dispatch()
        // intended to simplify using executeJavaScript() from other windows as a bad IPC method
        // TODO: add ipc stuff to bspwn to replace this
        pseudoipc: function (e) {
            events.dispatch({
                type: 'ENDPWN_PSEUDO_IPC',
                data: e
            });
        }

    });

    // disable analytics
    print('disabling analytics...');
    util.findFuncExports("AnalyticEventConfigs").default.track = () => { };

    // enable experiments
    print('enabling experiments menu...');
    util.findFuncExports('isDeveloper').__defineGetter__('isDeveloper', () => true);

    // if we used start() in the other files, it would create a different instance -- we dont want that
    //endpwn.customizer.init();
    //endpwn.settings.init();

}
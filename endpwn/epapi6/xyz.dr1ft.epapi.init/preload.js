/*

    EPAPI6 Init

    Copyright 2018 EndPwn Project

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    DO NOT EDIT THIS FILE! Your bootstrap may overwrite changes to it, and you will lose your work!
    EndPwn3 users: You can prevent this by creating a file in the same directory named DONTUPDATE

    https://github.com/endpwn/

*/

const fs = require('fs');
const win = require('electron').remote.getCurrentWindow();
const common = require('./common.js');
const bootstrap = endpwn.bootstrap;

module.exports = function () {

    // wait for dom to be ready before trying to set anything up
    win.webContents.on('dom-ready', () => {

        common.print('initializing webcrack...');
        function webcrack(n, b, d) { mArr = d.m, mCac = d.c, mCar = [], Object.keys(mCac).forEach(function (n) { mCar[n] = mCac[n] }), findFunc = function (n) { results = []; if ("string" == typeof n) mArr.forEach(function (r, t) { -1 !== r.toString().indexOf(n) && results.push(mCac[t]) }); else { if ("function" != typeof n) throw new TypeError("findFunc can only find via string and function, " + typeof n + " was passed"); mArr.forEach(function (r, e) { n(r) && results.push(mCac[e]) }) } return results }, findCache = function (n) { if (results = [], "function" == typeof n) mCar.forEach(function (r, t) { n(r) && results.push(r) }); else { if ("string" != typeof n) throw new TypeError("findCache can only find via function or string, " + typeof n + " was passed"); mCar.forEach(function (r, t) { if ("object" == typeof r.exports) for (p in r.exports) if (p == n && results.push(r), "default" == p && "object" == typeof r.exports["default"]) for (p in r.exports["default"]) p == n && results.push(r) }) } return results }, window.wc = { get: d, modArr: mArr, modCache: mCac, modCArr: mCar, findFunc: findFunc, findCache: findCache } }
        typeof webpackJsonp == 'function' ?
            webpackJsonp([1e3], { webcrack: webcrack }, ['webcrack']) :
            webpackJsonp.push([[1e3], { webcrack: webcrack }, [['webcrack']]]);

        common.print('waiting for Discord...');

        var observer = new MutationObserver(function (mutations) {

            if (mutations.map(m => m.target.classList.contains(wc.findFunc('app-').filter(x => x && x.exports && x.exports.app)[0].exports.app)).includes(true)) {

                observer.disconnect();
                common.print('discord has finished loading');

                common.print('loading core mains...');
                endpwn.loader.loadGroup('main', true);
                common.print('loading non-core mains...');
                endpwn.loader.loadGroup('main', false);

                console.log(`%cÎ£ndPwn%c
${bootstrap.name ? bootstrap.name : 'unknown'}${bootstrap.version ? ` ${bootstrap.version}` : ''}${bootstrap.method ? ` (${bootstrap.method})` : ''}
Loader v${endpwn.loader.resolve('xyz.dr1ft.epapi.init').version}
https://endpwn.github.io/
https://patreon.com/dr1ft`,
                    'background:linear-gradient(to bottom right,#0ff,#f0f);-webkit-background-clip:text;-webkit-text-fill-color:transparent;font-size:48px;font-family:sans-serif', '');

            }

        });

        observer.observe($('#app-mount'), { childList: true, subtree: true });

        common.print('loading styles...');
        endpwn.plugins.filter(x => x.style).forEach(plugin => {

            common.debug(`loading style from ${plugin.id}`);

            var fPath = `${plugin.path}/${plugin.style}`;
            if (!fs.existsSync(fPath)) throw 'could not find style file';

            var style = document.createElement("style");
            style.type = "text/css";
            style.textContent = fs.readFileSync(fPath);
            document.head.appendChild(style);

        });

        common.print('loading core domreadys...');
        endpwn.loader.loadGroup('domready', true);
        common.print('loading non-core domreadys...');
        endpwn.loader.loadGroup('domready', false);

    });

}
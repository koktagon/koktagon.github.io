/*

    EndPwn CRISPR

    Copyright 2018 EndPwn Project
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    DO NOT EDIT THIS FILE! Your bootstrap may overwrite changes to it, and you will lose your work!
    EndPwn3 users: You can prevent this by creating a file in the same directory named DONTUPDATE
    
    https://github.com/endpwn/

*/

// TODO: refactor this

const fs = require('fs');
const data = endpwn.data;

function debug(str) {
    console.debug(`%c[CRISPR]%c ` + str, 'font-weight:bold;color:#0cc', '');
}
function print(str) {
    console.log(`%c[CRISPR]%c ` + str, 'font-weight:bold;color:#0cc', '');
}
function warn(str) {
    console.warn(`%c[CRISPR]%c ` + str, 'font-weight:bold;color:#0cc', '');
}

module.exports = function () {

    print('initializing...');
    window.crispr = {

        research: {
            webpackJsonpPushes: [],
            webpackJsonpTransformations: []
        },

        data: {

        },

        functions: {

            patch: mod => {

                // make sure it's an array before trying to process it
                if (Array.isArray(mod)) {

                    // iterate over every module
                    debug(`processing ${mod.length} modules...`);
                    for (i in mod) {

                        // iterate over the replacement dictionary
                        [].concat.apply([], endpwn.plugins.filter(x => x.replacements).map(x => x.replacements)).forEach(pair => {

                            // convert the module constructor into a string
                            var orig = mod[i].toString();

                            // get the replacement snippet
                            var signature = pair.signature;

                            // check if it's an old shitty regex replacement
                            signature = typeof signature == 'string' ? signature.startsWith('/') && signature.endsWith('/') ? new RegExp(signature.substr(1, signature.length - 2)) : signature : signature;

                            // if the constructor contains our signature, patch it
                            if (typeof signature == 'string' ? orig.indexOf(signature) != -1 : orig.match(signature)) {

                                // replace the function with our new one
                                debug(`patching module ${i}... (${signature})`);
                                mod[i] = eval('(' + orig.replace(signature, pair.payload) + ')');

                            }

                        });

                    }

                }

            },

            pushHookOld: (x, mod, main) => {

                // disable safemode keystroke listener
                //document.removeEventListener('keydown', goSafe);

                // check if safemode
                //if (!localStorage['safemode'])
                crispr.functions.patch(mod);

                // call webpack proper with our modified modules
                return crispr.data.webpackPush(x, mod, main);

            },

            pushHookNew: (x, mod, main) => {

                // disable safemode keystroke listener
                //document.removeEventListener('keydown', goSafe);

                // check if safemode
                //if (!localStorage['safemode'])
                crispr.functions.patch(mod);

                // call webpack proper with our modified modules
                return mod;

            }

        },

    };

    print('hooking webpackJsonp...');
    Object.defineProperty(window, "webpackJsonp", {

        // return crispr's function instead of webpack proper
        get: () => window.crispr.hook,

        // setup replacement when discord tries to define webpack
        set: webpack => {
            if (webpack && webpack.push && webpack.push.patched) return;
            const push_original = webpack.push;

            window.crispr.webpackJsonp = webpack;
            if (typeof webpack == 'function') {
                window.crispr.data.webpackPush = webpack;
                window.crispr.hook = window.crispr.functions.pushHookOld;
            } else {
                const newPush = function (e, t, o) {
                    const modules = t || e[1];
                    const main = o ? o : e[2];
                    const _ = t ? e : e[0];

                    const patched = window.crispr.functions.pushHookNew(_, modules, main);

                    const args = [_, patched, main];

                    push_original.apply(webpack, [args])
                }

                webpack.push = newPush;
                window.crispr.hook = webpack;
                webpack.push.patched = true;
            }
        }
    });

}